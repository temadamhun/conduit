{
  "uid" : "566582d9f9a94ca2",
  "name" : "test_regisztracio",
  "fullName" : "test_conduit.test_case#test_regisztracio",
  "historyId" : "10fe5f5600c1fdcbc38721be91ff339a",
  "time" : {
    "start" : 1628438987346,
    "stop" : 1628438992205,
    "duration" : 4859
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert 'Registration failed!' == 'Welcome!'\n  - Welcome!\n  + Registration failed!",
  "statusTrace" : "def test_regisztracio():\n    \n        browser_options = Options()\n        browser_options.headless = True\n        browser = webdriver.Chrome(ChromeDriverManager().install(), options=browser_options)\n        #browser.maximize_window() #az oldal méretét maximalizálja.\n        URL = \"http://localhost:1667/#/\"\n        browser.get(URL)\n    \n        # sign_up = browser.find_elements_by_class_name(\"nav-link\")[1]\n        # sign_up = browser.find_element_by_xpath('//a[@class=\"nav-link\"][@href=\"#/register\"]')\n        sign_up = browser.find_element_by_partial_link_text(\"Sign up\")\n        sign_up.click()\n        username_input = browser.find_element_by_xpath('//input[@placeholder=\"Username\"][@type=\"text\"]')\n        username_input.send_keys(\"mikkamkka\")\n        email_input = browser.find_element_by_xpath('//input[@placeholder=\"Email\"][@type=\"text\"]')\n        email_input.send_keys(\"mikkamakka5@test.hu\")\n        password_input = browser.find_element_by_xpath('//input[@placeholder=\"Password\"][@type=\"password\"]')\n        password_input.send_keys(\"Mikkamakka2\")\n        sign_up_button = browser.find_element_by_xpath('//button[contains(text(),\"Sign up\")]')  #olyan buttont keres amely textje tartalmazza a sign up szöveget.\n        sign_up_button.click()\n        time.sleep(3)\n        #browser.switch_to.window(browser.window_handles[0])\n    \n        reg_result = browser.find_element_by_class_name(\"swal-title\")\n>       assert reg_result.text == \"Welcome!\"\nE       AssertionError: assert 'Registration failed!' == 'Welcome!'\nE         - Welcome!\nE         + Registration failed!\n\ntest_conduit/test_case.py:31: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: assert 'Registration failed!' == 'Welcome!'\n  - Welcome!\n  + Registration failed!",
    "statusTrace" : "def test_regisztracio():\n    \n        browser_options = Options()\n        browser_options.headless = True\n        browser = webdriver.Chrome(ChromeDriverManager().install(), options=browser_options)\n        #browser.maximize_window() #az oldal méretét maximalizálja.\n        URL = \"http://localhost:1667/#/\"\n        browser.get(URL)\n    \n        # sign_up = browser.find_elements_by_class_name(\"nav-link\")[1]\n        # sign_up = browser.find_element_by_xpath('//a[@class=\"nav-link\"][@href=\"#/register\"]')\n        sign_up = browser.find_element_by_partial_link_text(\"Sign up\")\n        sign_up.click()\n        username_input = browser.find_element_by_xpath('//input[@placeholder=\"Username\"][@type=\"text\"]')\n        username_input.send_keys(\"mikkamkka\")\n        email_input = browser.find_element_by_xpath('//input[@placeholder=\"Email\"][@type=\"text\"]')\n        email_input.send_keys(\"mikkamakka5@test.hu\")\n        password_input = browser.find_element_by_xpath('//input[@placeholder=\"Password\"][@type=\"password\"]')\n        password_input.send_keys(\"Mikkamakka2\")\n        sign_up_button = browser.find_element_by_xpath('//button[contains(text(),\"Sign up\")]')  #olyan buttont keres amely textje tartalmazza a sign up szöveget.\n        sign_up_button.click()\n        time.sleep(3)\n        #browser.switch_to.window(browser.window_handles[0])\n    \n        reg_result = browser.find_element_by_class_name(\"swal-title\")\n>       assert reg_result.text == \"Welcome!\"\nE       AssertionError: assert 'Registration failed!' == 'Welcome!'\nE         - Welcome!\nE         + Registration failed!\n\ntest_conduit/test_case.py:31: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "6a8fdd1565f2df8c",
      "name" : "log",
      "source" : "6a8fdd1565f2df8c.txt",
      "type" : "text/plain",
      "size" : 344
    }, {
      "uid" : "87253ace38f49367",
      "name" : "stderr",
      "source" : "87253ace38f49367.txt",
      "type" : "text/plain",
      "size" : 215
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "test_conduit"
  }, {
    "name" : "suite",
    "value" : "test_case"
  }, {
    "name" : "host",
    "value" : "fv-az39-521"
  }, {
    "name" : "thread",
    "value" : "3883-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_conduit.test_case"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "566582d9f9a94ca2.json",
  "parameterValues" : [ ]
}